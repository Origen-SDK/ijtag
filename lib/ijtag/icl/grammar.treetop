module IJTAG
  module ICL
    grammar Grammar
      rule icl_source
        icl_source_items+ {
          def to_ast
            n :icl, elements.map{ |e| e.to_ast }
          end
        }
      end

      rule icl_source_items
        S / ml_comment / sl_comment / namespace_def / use_namespace_def / module_def
      end

      rule namespace_def
        "NameSpace" s namespace_name? s ";" s
      end

      rule use_namespace_def
        "UseNameSpace" s name:namespace_name? s ";" s {
          def to_ast
            n1 :use_namespace, name.to_ast
          end
        }
      end

      rule module_def
        "Module" S name:module_name S "{" s items:module_item* s "}" s {
          def to_ast
            n :module, [name.to_ast, *items.elements.map{ |e| e.to_ast }]
          end
        }
      end

      rule module_item
        use_namespace_def
      end

      rule scalar_id
        [a-zA-Z] ([a-zA-Z_] / dec_digit)*
      end

      rule dec_digit
        [0-9]
      end

      rule module_name
        scalar_id {
          def to_ast
            n1 :name, text_value
          end
        }
      end

      rule namespace_name
        scalar_id {
          def to_ast
            n1 :name, text_value
          end
        }
      end

      rule ml_comment
        "/*" (!end_of_comment .)* end_of_comment s
      end

      rule end_of_comment
        "*/"
      end

      rule sl_comment
        "//" (!N .)* s
      end

      # Optional space, including new lines and comments
      rule s
        (" " / "\t" / N / sl_comment / ml_comment)*
      end

      # Required space, including new lines and comments
      rule S
        (" " / "\t" / N / sl_comment / ml_comment)+
      end

      # Optional end of line
      rule n
        "\r"? "\n"?
      end

      # Required end of line
      rule N
        "\r"? "\n"
      end
    end
  end
end
