module IJTAG
  module ICL
    grammar Grammar
      rule icl_source
        iclSource_items+ {
          def to_ast
            n :icl, elements.map{ |e| e.to_ast }
          end
        }
      end

      rule iclSource_items
        S / ml_comment / sl_comment / nameSpace_def / useNameSpace_def / module_def
      end

      #  _______            _                    _   _   _           _           
      # |__   __|          | |                  | | | \ | |         | |          
      #    | | ___  _ __   | |     _____   _____| | |  \| | ___   __| | ___  ___ 
      #    | |/ _ \| '_ \  | |    / _ \ \ / / _ \ | | . ` |/ _ \ / _` |/ _ \/ __|
      #    | | (_) | |_) | | |___|  __/\ V /  __/ | | |\  | (_) | (_| |  __/\__ \
      #    |_|\___/| .__/  |______\___| \_/ \___|_| |_| \_|\___/ \__,_|\___||___/
      #            | |                                                           
      #            |_|

      rule ml_comment
        "/*" (!end_of_comment .)* end_of_comment s
      end

      rule end_of_comment
        "*/"
      end

      rule sl_comment
        "//" (!N .)* s
      end

      rule nameSpace_def
        "NameSpace" s namespace_name? s ";" s
      end

      rule useNameSpace_def
        "UseNameSpace" s name:namespace_name? s ";" s {
          def to_ast
            n1 :use_namespace, name.to_ast
          end
        }
      end

      rule module_def
        "Module" S name:module_name S "{" s items:module_item* s "}" s {
          def to_ast
            n :module, [name.to_ast, *items.elements.map{ |e| e.to_ast }]
          end
        }
      end

      rule module_item
        useNameSpace_def
        #useNameSpace_def /
        #port_def /
        #instance_def /
        #scanRegister_def /
        #dataRegister_def /
        #logicSignal_def /
        #scanMux_def /
        #dataMux_def /
        #clockMux_def /
        #oneHotDataGroup_def /
        #oneHotScanGroup_def /
        #scanInterface_def /
        #accessLink_def /
        #alias_def /
        #enum_def /
        #parameter_def /
        #localParameter_def /
        #attribute_def
      end

      rule port_def
        scanInPort_def /
        scanOutPort_def /
        shiftEnPort_def /
        captureEnPort_def /
        updateEnPort_def /
        dataInPort_def /
        dataOutPort_def /
        toShiftEnPort_def /
        toUpdateEnPort_def /
        toCaptureEnPort_def /
        selectPort_def /
        toSelectPort_def /
        resetPort_def /
        toResetPort_def /
        tmsPort_def /
        toTmsPort_def /
        tckPort_def /
        toTckPort_def /
        clockPort_def /
        toClockPort_def /
        trstPort_def /
        toTrstPort_def /
        toIRSelectPort_def /
        addressPort_def /
        writeEnPort_def /
        readEnPort_def
      end

      #  _______                  _             _   _   _           _           
      # |__   __|                (_)           | | | \ | |         | |          
      #    | | ___ _ __ _ __ ___  _ _ __   __ _| | |  \| | ___   __| | ___  ___ 
      #    | |/ _ \ '__| '_ ` _ \| | '_ \ / _` | | | . ` |/ _ \ / _` |/ _ \/ __|
      #    | |  __/ |  | | | | | | | | | | (_| | | | |\  | (_) | (_| |  __/\__ \
      #    |_|\___|_|  |_| |_| |_|_|_| |_|\__,_|_| |_| \_|\___/ \__,_|\___||___/      

      rule hier_port
        (instance_name ".")+ port_name {
          def to_ast
            n1 :port, text_value
          end
        }
      end

      rule port_name
        SCALAR_ID / vector_id { 
          def to_ast
            n1 :name, text_value
          end
        }
      end

      rule register_name
        SCALAR_ID / vector_id { 
          def to_ast
            n1 :name, text_value
          end
        }
      end

      rule instance_name
        SCALAR_ID {
          def to_ast
            n1 :name, text_value
          end
        }
      end

      rule namespace_name
        SCALAR_ID {
          def to_ast
            n1 :name, text_value
          end
        }
      end

      rule module_name
        SCALAR_ID {
          def to_ast
            n1 :name, text_value
          end
        }
      end

      rule reg_port_signal_id
        SCALAR_ID / vector_id { 
          def to_ast
            n1 :id, text_value
          end
        }
      end

      rule signal
        number / reg_port_signal_id / hier_port { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule reset_signal
        "~"? signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule scan_signal
        "~"? signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end
      
      rule data_signal
        "~"? signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule clock_signal
        "~"? signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule tck_signal
        signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule tms_signal
        signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule trst_signal
        signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule shiftEn_signal
        signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule captureEn_signal
        signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule updateEn_signal
        signal { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_reset_signal
        (reset_signal / data_signal) ("," reset_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_scan_signal
        (scan_signal / data_signal) ("," scan_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_data_signal
        (data_signal) ("," data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_clock_signal
        (clock_signal / data_signal) ("," clock_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_tck_signal
        (tck_signal / data_signal) ("," tck_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_shiftEn_signal
        (shiftEn_signal / data_signal) ("," shiftEn_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_captureEn_signal
        (captureEn_signal / data_signal) ("," captureEn_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_tms_signal
        (tms_signal / data_signal) ("," tms_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      rule concat_trst_signal
        (trst_signal / data_signal) ("," trst_signal / data_signal)* { 
          def to_ast
            n1 :signal, text_value
          end
        }
      end

      # __      __   _              ______                         _       
      # \ \    / /  | |            |  ____|                       | |      
      #  \ \  / /_ _| |_   _  ___  | |__ ___  _ __ _ __ ___   __ _| |_ ___ 
      #   \ \/ / _` | | | | |/ _ \ |  __/ _ \| '__| '_ ` _ \ / _` | __/ __|
      #    \  / (_| | | |_| |  __/ | | | (_) | |  | | | | | | (_| | |_\__ \
      #     \/ \__,_|_|\__,_|\___| |_|  \___/|_|  |_| |_| |_|\__,_|\__|___/      

      rule SCALAR_ID
        [a-zA-Z] ([a-zA-Z_] / DEC_DIGIT)*
      end

      rule pos_int
        "0" / "1" / POS_INT
      end

      rule POS_INT
        DEC_DIGIT ('_' / DEC_DIGIT)*
      end

      rule size
        pos_int / '$' SCALAR_ID
      end

      rule UNKNOWN_DIGIT
        'X' / 'x'
      end

      rule DEC_DIGIT
        [0-9]
      end

      rule BIN_DIGIT
        [0-1] / UNKNOWN_DIGIT
      end

      rule HEX_DIGIT
        [0-9a-fA-F] / UNKNOWN_DIGIT
      end

      rule DEC_BASE
        "'" ('d' / 'D') (" " / "\t")*
      end

      rule BIN_BASE
        "'" ('b' / 'B') (" " / "\t")*
      end

      rule HEX_BASE
        "'" ('h' / 'H') (" " / "\t")*
      end

      rule UNSIZED_DEC_NUMBER
        DEC_BASE POS_INT
      end

      rule UNSIZED_BIN_NUMBER
        BIN_BASE BIN_DIGIT ("_" / BIN_DIGIT)*
      end

      rule UNSIZED_HEX_NUMBER
        HEX_BASE HEX_DIGIT ("_" / HEX_DIGIT)*
      end

      rule sized_dec_number
        size UNSIZED_DEC_NUMBER
      end

      rule sized_bin_number
        size UNSIZED_BIN_NUMBER
      end

      rule sized_hex_number
        size UNSIZED_HEX_NUMBER
      end

      rule vector_id
        SCALAR_ID "[" (index / range) "]"
      end

      rule index
        integer_expr
      end

      rule range
        index ":" index
      end

      rule number
        unsized_number / sized_number / integer_expr
      end

      rule integer_expr
        integer_expr_lvl1
      end

      rule integer_expr_lvl1
        integer_expr_lvl2 (("+" / "-") integer_expr_lvl1)?
      end

      rule integer_expr_lvl2
        integer_expr_arg (("*" / "/" / "%") integer_expr_lvl2)?
      end

      rule integer_expr_paren
        "(" integer_expr ")"
      end

      rule integer_expr_arg
        integer_expr_paren / pos_int / parameter_ref
      end

      rule parameter_ref
        "$" SCALAR_ID
      end

      rule unsized_number
        pos_int / UNSIZED_DEC_NUMBER / UNSIZED_BIN_NUMBER / UNSIZED_HEX_NUMBER
      end

      rule sized_number
        sized_dec_number / sized_bin_number / sized_hex_number
      end

      rule concat_number
        "~"? number ("," "~"? number)*
      end

      rule concat_number_list
        concat_number ("|" concat_number)*
      end

      #  _    _      _                     
      # | |  | |    | |                    
      # | |__| | ___| |_ __   ___ _ __ ___ 
      # |  __  |/ _ \ | '_ \ / _ \ '__/ __|
      # | |  | |  __/ | |_) |  __/ |  \__ \
      # |_|  |_|\___|_| .__/ \___|_|  |___/
      #               | |                  
      #               |_|

      # Optional space, including new lines and comments
      rule s
        (" " / "\t" / N / sl_comment / ml_comment)*
      end

      # Required space, including new lines and comments
      rule S
        (" " / "\t" / N / sl_comment / ml_comment)+
      end

      # Optional end of line
      rule n
        "\r"? "\n"?
      end

      # Required end of line
      rule N
        "\r"? "\n"
      end
    end
  end
end
