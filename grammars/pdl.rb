# Autogenerated from a Treetop grammar. Edits may be lost.


module IJTAG
  module PDL
    module Grammar
      include Treetop::Runtime

      def root
        @root ||= :pdl_source
      end

      module PdlSource0
        def to_ast
          n :pdl_source, *elements.map{ |e| e.to_ast if e.respond_to?(:to_ast) }.compact, input: input, interval: interval, file: file
        end
      end

      def _nt_pdl_source
        start_index = index
        if node_cache[:pdl_source].has_key?(index)
          cached = node_cache[:pdl_source][index]
          if cached
            node_cache[:pdl_source][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          r1 = _nt_pdlSource_items
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(PdlSource0)
        end

        node_cache[:pdl_source][start_index] = r0

        r0
      end

      def _nt_pdlSource_items
        start_index = index
        if node_cache[:pdlSource_items].has_key?(index)
          cached = node_cache[:pdlSource_items][index]
          if cached
            node_cache[:pdlSource_items][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_S
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_sl_comment
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            r3 = _nt_eoc
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r0 = r3
            else
              r4 = _nt_pdl_level_def
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r0 = r4
              else
                r5 = _nt_iprocsformodule_def
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r0 = r5
                else
                  r6 = _nt_iuseprocnamespace_def
                  if r6
                    r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                    r0 = r6
                  else
                    r7 = _nt_iproc_def
                    if r7
                      r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                      r0 = r7
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end

        node_cache[:pdlSource_items][start_index] = r0

        r0
      end

      module SlComment0
      end

      module SlComment1
        def N
          elements[2]
        end
      end

      def _nt_sl_comment
        start_index = index
        if node_cache[:sl_comment].has_key?(index)
          cached = node_cache[:sl_comment][index]
          if cached
            node_cache[:sl_comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?("#", false, index))
          r1 = true
          @index += match_len
        else
          terminal_parse_failure('"#"')
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            i4 = index
            r5 = _nt_N
            if r5
              @index = i4
              r4 = nil
            else
              @index = i4
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r4
            if r4
              if index < input_length
                r6 = true
                @index += 1
              else
                terminal_parse_failure("any character")
                r6 = nil
              end
              s3 << r6
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(SlComment0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
          if r2
            r7 = _nt_N
            s0 << r7
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(SlComment1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:sl_comment][start_index] = r0

        r0
      end

      module PdlLevelDef0
        def S1
          elements[1]
        end

        def level
          elements[2]
        end

        def S2
          elements[3]
        end

        def S3
          elements[5]
        end

        def version
          elements[6]
        end

        def s
          elements[7]
        end
      end

      module PdlLevelDef1
        def to_ast
          n :pdl_level_def, level.text_value, level.version, input: input, interval: interval, file: file
        end
      end

      def _nt_pdl_level_def
        start_index = index
        if node_cache[:pdl_level_def].has_key?(index)
          cached = node_cache[:pdl_level_def][index]
          if cached
            node_cache[:pdl_level_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iPDLLevel', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iPDLLevel\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            s3, i3 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                r4 = true
                @index += 1
              else
                terminal_parse_failure('[0-9]')
                r4 = nil
              end
              if r4
                s3 << r4
              else
                break
              end
            end
            if s3.empty?
              @index = i3
              r3 = nil
            else
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            end
            s0 << r3
            if r3
              r5 = _nt_S
              s0 << r5
              if r5
                if (match_len = has_terminal?('-version', false, index))
                  r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'-version\'')
                  r6 = nil
                end
                s0 << r6
                if r6
                  r7 = _nt_S
                  s0 << r7
                  if r7
                    s8, i8 = [], index
                    loop do
                      if has_terminal?(@regexps[gr = '\A[0-9a-zA-Z_]'] ||= Regexp.new(gr), :regexp, index)
                        r9 = true
                        @index += 1
                      else
                        terminal_parse_failure('[0-9a-zA-Z_]')
                        r9 = nil
                      end
                      if r9
                        s8 << r9
                      else
                        break
                      end
                    end
                    if s8.empty?
                      @index = i8
                      r8 = nil
                    else
                      r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                    end
                    s0 << r8
                    if r8
                      r10 = _nt_s
                      s0 << r10
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(PdlLevelDef0)
          r0.extend(PdlLevelDef1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:pdl_level_def][start_index] = r0

        r0
      end

      module IprocsformoduleDef0
        def S1
          elements[0]
        end

        def S2
          elements[2]
        end

        def namespace
          elements[3]
        end
      end

      module IprocsformoduleDef1
        def S
          elements[1]
        end

        def name
          elements[2]
        end

        def d
          elements[3]
        end

        def eoc
          elements[4]
        end
      end

      module IprocsformoduleDef2
        def to_ast
          if d.respond_to?(:namespace)
            n :iprocsformodule_def, name.to_ast, d.namespace.to_ast, input: input, interval: interval, file: file
          else
            n :iprocsformodule_def, name.to_ast, input: input, interval: interval, file: file
          end
        end
      end

      def _nt_iprocsformodule_def
        start_index = index
        if node_cache[:iprocsformodule_def].has_key?(index)
          cached = node_cache[:iprocsformodule_def][index]
          if cached
            node_cache[:iprocsformodule_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iProcsForModule', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iProcsForModule\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_module_name
            s0 << r3
            if r3
              i5, s5 = index, []
              r6 = _nt_S
              s5 << r6
              if r6
                if (match_len = has_terminal?('-iProcNameSpace', false, index))
                  r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'-iProcNameSpace\'')
                  r7 = nil
                end
                s5 << r7
                if r7
                  r8 = _nt_S
                  s5 << r8
                  if r8
                    r9 = _nt_pdl_namespace_name
                    s5 << r9
                  end
                end
              end
              if s5.last
                r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
                r5.extend(IprocsformoduleDef0)
              else
                @index = i5
                r5 = nil
              end
              if r5
                r4 = r5
              else
                r4 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r4
              if r4
                r10 = _nt_eoc
                s0 << r10
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IprocsformoduleDef1)
          r0.extend(IprocsformoduleDef2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iprocsformodule_def][start_index] = r0

        r0
      end

      module IuseprocnamespaceDef0
        def S
          elements[1]
        end

        def name
          elements[2]
        end
      end

      module IuseprocnamespaceDef1
        def to_ast
          n :iuseprocnamespace_def, name.to_ast, input: input, interval: interval, file: file
        end
      end

      def _nt_iuseprocnamespace_def
        start_index = index
        if node_cache[:iuseprocnamespace_def].has_key?(index)
          cached = node_cache[:iuseprocnamespace_def][index]
          if cached
            node_cache[:iuseprocnamespace_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iUseProcNameSpace', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iUseProcNameSpace\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            i3 = index
            r4 = _nt_pdl_namespace_name
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r3 = r4
            else
              if (match_len = has_terminal?('-', false, index))
                r5 = true
                @index += match_len
              else
                terminal_parse_failure('\'-\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r3 = r5
              else
                @index = i3
                r3 = nil
              end
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IuseprocnamespaceDef0)
          r0.extend(IuseprocnamespaceDef1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iuseprocnamespace_def][start_index] = r0

        r0
      end

      def _nt_iproc_def
        start_index = index
        if node_cache[:iproc_def].has_key?(index)
          cached = node_cache[:iproc_def][index]
          if cached
            node_cache[:iproc_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_iproc_def_without_args
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_iproc_def_with_args
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:iproc_def][start_index] = r0

        r0
      end

      module IprocDefWithArgs0
        def S
          elements[1]
        end

        def name
          elements[2]
        end

        def s1
          elements[3]
        end

        def s2
          elements[5]
        end

        def args
          elements[6]
        end

        def s3
          elements[7]
        end

        def s4
          elements[9]
        end

        def s5
          elements[11]
        end

        def commands
          elements[12]
        end

        def s6
          elements[13]
        end

        def eoc
          elements[15]
        end
      end

      module IprocDefWithArgs1
        def to_ast
          a1 = n :args, *args.elements.map{ |c| c.to_ast }
          a2 = n :commands, *commands.elements.map{ |c| c.to_ast }
          n :iproc_def, name.to_ast, a1, a2, input: input, interval: interval, file: file
        end
      end

      def _nt_iproc_def_with_args
        start_index = index
        if node_cache[:iproc_def_with_args].has_key?(index)
          cached = node_cache[:iproc_def_with_args][index]
          if cached
            node_cache[:iproc_def_with_args][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iProc', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iProc\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_procName
            s0 << r3
            if r3
              r4 = _nt_s
              s0 << r4
              if r4
                if (match_len = has_terminal?('{', false, index))
                  r5 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'{\'')
                  r5 = nil
                end
                s0 << r5
                if r5
                  r6 = _nt_s
                  s0 << r6
                  if r6
                    s7, i7 = [], index
                    loop do
                      r8 = _nt_argument
                      if r8
                        s7 << r8
                      else
                        break
                      end
                    end
                    if s7.empty?
                      @index = i7
                      r7 = nil
                    else
                      r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                    end
                    s0 << r7
                    if r7
                      r9 = _nt_s
                      s0 << r9
                      if r9
                        if (match_len = has_terminal?('}', false, index))
                          r10 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\'}\'')
                          r10 = nil
                        end
                        s0 << r10
                        if r10
                          r11 = _nt_s
                          s0 << r11
                          if r11
                            if (match_len = has_terminal?('{', false, index))
                              r12 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'{\'')
                              r12 = nil
                            end
                            s0 << r12
                            if r12
                              r13 = _nt_s
                              s0 << r13
                              if r13
                                s14, i14 = [], index
                                loop do
                                  r15 = _nt_command
                                  if r15
                                    s14 << r15
                                  else
                                    break
                                  end
                                end
                                if s14.empty?
                                  @index = i14
                                  r14 = nil
                                else
                                  r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                                end
                                s0 << r14
                                if r14
                                  r16 = _nt_s
                                  s0 << r16
                                  if r16
                                    if (match_len = has_terminal?('}', false, index))
                                      r17 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'}\'')
                                      r17 = nil
                                    end
                                    s0 << r17
                                    if r17
                                      r18 = _nt_eoc
                                      s0 << r18
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IprocDefWithArgs0)
          r0.extend(IprocDefWithArgs1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iproc_def_with_args][start_index] = r0

        r0
      end

      module IprocDefWithoutArgs0
        def s
          elements[1]
        end

      end

      module IprocDefWithoutArgs1
        def S
          elements[1]
        end

        def name
          elements[2]
        end

        def s1
          elements[3]
        end

        def s2
          elements[5]
        end

        def s3
          elements[7]
        end

        def commands
          elements[8]
        end

        def s4
          elements[9]
        end

        def eoc
          elements[11]
        end
      end

      module IprocDefWithoutArgs2
        def to_ast
          a1 = n :args
          a2 = n :commands, *commands.elements.map{ |c| c.to_ast }
          n :iproc_def, name.to_ast, a1, a2, input: input, interval: interval, file: file
        end
      end

      def _nt_iproc_def_without_args
        start_index = index
        if node_cache[:iproc_def_without_args].has_key?(index)
          cached = node_cache[:iproc_def_without_args][index]
          if cached
            node_cache[:iproc_def_without_args][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iProc', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iProc\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_procName
            s0 << r3
            if r3
              r4 = _nt_s
              s0 << r4
              if r4
                i6, s6 = index, []
                if (match_len = has_terminal?('{', false, index))
                  r7 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'{\'')
                  r7 = nil
                end
                s6 << r7
                if r7
                  r8 = _nt_s
                  s6 << r8
                  if r8
                    if (match_len = has_terminal?('}', false, index))
                      r9 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'}\'')
                      r9 = nil
                    end
                    s6 << r9
                  end
                end
                if s6.last
                  r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                  r6.extend(IprocDefWithoutArgs0)
                else
                  @index = i6
                  r6 = nil
                end
                if r6
                  r5 = r6
                else
                  r5 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r5
                if r5
                  r10 = _nt_s
                  s0 << r10
                  if r10
                    if (match_len = has_terminal?('{', false, index))
                      r11 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'{\'')
                      r11 = nil
                    end
                    s0 << r11
                    if r11
                      r12 = _nt_s
                      s0 << r12
                      if r12
                        s13, i13 = [], index
                        loop do
                          r14 = _nt_command
                          if r14
                            s13 << r14
                          else
                            break
                          end
                        end
                        if s13.empty?
                          @index = i13
                          r13 = nil
                        else
                          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                        end
                        s0 << r13
                        if r13
                          r15 = _nt_s
                          s0 << r15
                          if r15
                            if (match_len = has_terminal?('}', false, index))
                              r16 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'}\'')
                              r16 = nil
                            end
                            s0 << r16
                            if r16
                              r17 = _nt_eoc
                              s0 << r17
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IprocDefWithoutArgs1)
          r0.extend(IprocDefWithoutArgs2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iproc_def_without_args][start_index] = r0

        r0
      end

      module ModuleName0
        def icl_namespace_name
          elements[0]
        end

      end

      module ModuleName1
        def SCALAR_ID
          elements[1]
        end
      end

      module ModuleName2
        def to_ast
          text_value
        end
      end

      def _nt_module_name
        start_index = index
        if node_cache[:module_name].has_key?(index)
          cached = node_cache[:module_name][index]
          if cached
            node_cache[:module_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i2, s2 = index, []
        r3 = _nt_icl_namespace_name
        s2 << r3
        if r3
          if (match_len = has_terminal?('::', false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'::\'')
            r4 = nil
          end
          s2 << r4
        end
        if s2.last
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          r2.extend(ModuleName0)
        else
          @index = i2
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          r5 = _nt_SCALAR_ID
          s0 << r5
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ModuleName1)
          r0.extend(ModuleName2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:module_name][start_index] = r0

        r0
      end

      def _nt_instancePath
        start_index = index
        if node_cache[:instancePath].has_key?(index)
          cached = node_cache[:instancePath][index]
          if cached
            node_cache[:instancePath][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_dot_id

        node_cache[:instancePath][start_index] = r0

        r0
      end

      module ScanInterfaceName0
        def instancePath
          elements[0]
        end

      end

      module ScanInterfaceName1
        def SCALAR_ID
          elements[1]
        end
      end

      def _nt_scanInterface_name
        start_index = index
        if node_cache[:scanInterface_name].has_key?(index)
          cached = node_cache[:scanInterface_name][index]
          if cached
            node_cache[:scanInterface_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i2, s2 = index, []
        r3 = _nt_instancePath
        s2 << r3
        if r3
          if (match_len = has_terminal?('.', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r4 = nil
          end
          s2 << r4
        end
        if s2.last
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          r2.extend(ScanInterfaceName0)
        else
          @index = i2
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          r5 = _nt_SCALAR_ID
          s0 << r5
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ScanInterfaceName1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:scanInterface_name][start_index] = r0

        r0
      end

      def _nt_port
        start_index = index
        if node_cache[:port].has_key?(index)
          cached = node_cache[:port][index]
          if cached
            node_cache[:port][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_hier_signal

        node_cache[:port][start_index] = r0

        r0
      end

      def _nt_reg_or_port
        start_index = index
        if node_cache[:reg_or_port].has_key?(index)
          cached = node_cache[:reg_or_port][index]
          if cached
            node_cache[:reg_or_port][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_hier_signal

        node_cache[:reg_or_port][start_index] = r0

        r0
      end

      def _nt_reg_port_or_instance
        start_index = index
        if node_cache[:reg_port_or_instance].has_key?(index)
          cached = node_cache[:reg_port_or_instance][index]
          if cached
            node_cache[:reg_port_or_instance][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_hier_signal

        node_cache[:reg_port_or_instance][start_index] = r0

        r0
      end

      module HierSignal0
        def path
          elements[0]
        end

      end

      module HierSignal1
        def ins
          elements[0]
        end

        def signal
          elements[1]
        end
      end

      module HierSignal2
        def to_ast
          if ins.elements
            n :hier_port, *ins.elements.map{ |e| e.path.to_ast }, signal.to_ast, input: input, interval: interval, file: file
          else
            n :hier_port, signal.to_ast, input: input, interval: interval, file: file
          end
        end
      end

      def _nt_hier_signal
        start_index = index
        if node_cache[:hier_signal].has_key?(index)
          cached = node_cache[:hier_signal][index]
          if cached
            node_cache[:hier_signal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i2, s2 = index, []
        r3 = _nt_instancePath
        s2 << r3
        if r3
          if (match_len = has_terminal?('.', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r4 = nil
          end
          s2 << r4
        end
        if s2.last
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          r2.extend(HierSignal0)
        else
          @index = i2
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          i5 = index
          r6 = _nt_reg_port_signal_id
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_ARGUMENT_REF
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          s0 << r5
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(HierSignal1)
          r0.extend(HierSignal2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:hier_signal][start_index] = r0

        r0
      end

      def _nt_reg_port_signal_id
        start_index = index
        if node_cache[:reg_port_signal_id].has_key?(index)
          cached = node_cache[:reg_port_signal_id][index]
          if cached
            node_cache[:reg_port_signal_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_vector_id
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_SCALAR_ID
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:reg_port_signal_id][start_index] = r0

        r0
      end

      module VectorId0
        def id
          elements[0]
        end

        def ind
          elements[2]
        end

      end

      module VectorId1
        def to_ast
          n :vector_id, id.to_ast, ind.to_ast, input: input, interval: interval, file: file
        end
      end

      def _nt_vector_id
        start_index = index
        if node_cache[:vector_id].has_key?(index)
          cached = node_cache[:vector_id][index]
          if cached
            node_cache[:vector_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_SCALAR_ID
        s0 << r1
        if r1
          i2 = index
          if (match_len = has_terminal?('[', false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('\'[\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r2 = r3
          else
            if (match_len = has_terminal?('(', false, index))
              r4 = true
              @index += match_len
            else
              terminal_parse_failure('\'(\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r2 = r4
            else
              @index = i2
              r2 = nil
            end
          end
          s0 << r2
          if r2
            i5 = index
            r6 = _nt_index
            if r6
              r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
              r5 = r6
            else
              r7 = _nt_range
              if r7
                r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                r5 = r7
              else
                @index = i5
                r5 = nil
              end
            end
            s0 << r5
            if r5
              i8 = index
              if (match_len = has_terminal?(']', false, index))
                r9 = true
                @index += match_len
              else
                terminal_parse_failure('\']\'')
                r9 = nil
              end
              if r9
                r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                r8 = r9
              else
                if (match_len = has_terminal?(')', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r10 = nil
                end
                if r10
                  r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                  r8 = r10
                else
                  @index = i8
                  r8 = nil
                end
              end
              s0 << r8
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(VectorId0)
          r0.extend(VectorId1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:vector_id][start_index] = r0

        r0
      end

      def _nt_index
        start_index = index
        if node_cache[:index].has_key?(index)
          cached = node_cache[:index][index]
          if cached
            node_cache[:index][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_pdl_number

        node_cache[:index][start_index] = r0

        r0
      end

      module Range0
        def start
          elements[0]
        end

        def stop
          elements[2]
        end
      end

      module Range1
        def to_ast
          n :hier_port, start.to_ast, stop.to_ast, input: input, interval: interval, file: file
        end
      end

      def _nt_range
        start_index = index
        if node_cache[:range].has_key?(index)
          cached = node_cache[:range][index]
          if cached
            node_cache[:range][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_index
        s0 << r1
        if r1
          if (match_len = has_terminal?(':', false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('\':\'')
            r2 = nil
          end
          s0 << r2
          if r2
            r3 = _nt_index
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Range0)
          r0.extend(Range1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:range][start_index] = r0

        r0
      end

      def _nt_enum_name
        start_index = index
        if node_cache[:enum_name].has_key?(index)
          cached = node_cache[:enum_name][index]
          if cached
            node_cache[:enum_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_SCALAR_ID

        node_cache[:enum_name][start_index] = r0

        r0
      end

      def _nt_instance_name
        start_index = index
        if node_cache[:instance_name].has_key?(index)
          cached = node_cache[:instance_name][index]
          if cached
            node_cache[:instance_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_SCALAR_ID

        node_cache[:instance_name][start_index] = r0

        r0
      end

      def _nt_cycleCount
        start_index = index
        if node_cache[:cycleCount].has_key?(index)
          cached = node_cache[:cycleCount][index]
          if cached
            node_cache[:cycleCount][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_pdl_number

        node_cache[:cycleCount][start_index] = r0

        r0
      end

      def _nt_sysClock
        start_index = index
        if node_cache[:sysClock].has_key?(index)
          cached = node_cache[:sysClock][index]
          if cached
            node_cache[:sysClock][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_hier_signal

        node_cache[:sysClock][start_index] = r0

        r0
      end

      def _nt_sourceClock
        start_index = index
        if node_cache[:sourceClock].has_key?(index)
          cached = node_cache[:sourceClock][index]
          if cached
            node_cache[:sourceClock][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_hier_signal

        node_cache[:sourceClock][start_index] = r0

        r0
      end

      def _nt_chain_id
        start_index = index
        if node_cache[:chain_id].has_key?(index)
          cached = node_cache[:chain_id][index]
          if cached
            node_cache[:chain_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_SCALAR_ID

        node_cache[:chain_id][start_index] = r0

        r0
      end

      def _nt_length
        start_index = index
        if node_cache[:length].has_key?(index)
          cached = node_cache[:length][index]
          if cached
            node_cache[:length][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_POS_INT

        node_cache[:length][start_index] = r0

        r0
      end

      def _nt_procName
        start_index = index
        if node_cache[:procName].has_key?(index)
          cached = node_cache[:procName][index]
          if cached
            node_cache[:procName][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_SCALAR_ID

        node_cache[:procName][start_index] = r0

        r0
      end

      def _nt_pdl_number
        start_index = index
        if node_cache[:pdl_number].has_key?(index)
          cached = node_cache[:pdl_number][index]
          if cached
            node_cache[:pdl_number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_TCL_HEX_NUMBER
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_TCL_BIN_NUMBER
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            r3 = _nt_POS_INT
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r0 = r3
            else
              r4 = _nt_ARGUMENT_REF
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r0 = r4
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end

        node_cache[:pdl_number][start_index] = r0

        r0
      end

      module POSINT0
        def to_ast
          text_value.to_i
        end
      end

      def _nt_POS_INT
        start_index = index
        if node_cache[:POS_INT].has_key?(index)
          cached = node_cache[:POS_INT][index]
          if cached
            node_cache[:POS_INT][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r1 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(POSINT0)
        end

        node_cache[:POS_INT][start_index] = r0

        r0
      end

      module TCLHEXNUMBER0
        def num
          elements[1]
        end
      end

      module TCLHEXNUMBER1
        def to_ast
          if num.text_value =~ /[xX]/
            size = num.text_value.length * 4
            Origen::XNumber.new("h#{size}_#{num.text_value}")
          else
            num.text_value.to_i(16)
          end
        end
      end

      def _nt_TCL_HEX_NUMBER
        start_index = index
        if node_cache[:TCL_HEX_NUMBER].has_key?(index)
          cached = node_cache[:TCL_HEX_NUMBER][index]
          if cached
            node_cache[:TCL_HEX_NUMBER][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('0x', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'0x\'')
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9A-Fa-fxX]'] ||= Regexp.new(gr), :regexp, index)
              r3 = true
              @index += 1
            else
              terminal_parse_failure('[0-9A-Fa-fxX]')
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          if s2.empty?
            @index = i2
            r2 = nil
          else
            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          end
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(TCLHEXNUMBER0)
          r0.extend(TCLHEXNUMBER1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:TCL_HEX_NUMBER][start_index] = r0

        r0
      end

      module TCLBINNUMBER0
        def num
          elements[1]
        end
      end

      module TCLBINNUMBER1
        def to_ast
          if num.text_value =~ /[xX]/
            size = num.text_value.length
            Origen::XNumber.new("b#{size}_#{num.text_value}")
          else
            num.text_value.to_i(2)
          end
        end
      end

      def _nt_TCL_BIN_NUMBER
        start_index = index
        if node_cache[:TCL_BIN_NUMBER].has_key?(index)
          cached = node_cache[:TCL_BIN_NUMBER][index]
          if cached
            node_cache[:TCL_BIN_NUMBER][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('0b', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'0b\'')
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[01xX]'] ||= Regexp.new(gr), :regexp, index)
              r3 = true
              @index += 1
            else
              terminal_parse_failure('[01xX]')
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          if s2.empty?
            @index = i2
            r2 = nil
          else
            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          end
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(TCLBINNUMBER0)
          r0.extend(TCLBINNUMBER1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:TCL_BIN_NUMBER][start_index] = r0

        r0
      end

      module ISCANHEXNUMBER0
        def s
          elements[1]
        end

        def num
          elements[3]
        end

      end

      module ISCANHEXNUMBER1
        def to_ast
          debugger
        end
      end

      def _nt_ISCAN_HEX_NUMBER
        start_index = index
        if node_cache[:ISCAN_HEX_NUMBER].has_key?(index)
          cached = node_cache[:ISCAN_HEX_NUMBER][index]
          if cached
            node_cache[:ISCAN_HEX_NUMBER][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i1 = index
        if (match_len = has_terminal?('"', false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r2 = nil
        end
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r1 = r2
        else
          if (match_len = has_terminal?('{', false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('\'{\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r1 = r3
          else
            @index = i1
            r1 = nil
          end
        end
        s0 << r1
        if r1
          r4 = _nt_s
          s0 << r4
          if r4
            if (match_len = has_terminal?('0x', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'0x\'')
              r5 = nil
            end
            s0 << r5
            if r5
              s6, i6 = [], index
              loop do
                i7 = index
                if has_terminal?(@regexps[gr = '\A[0-9A-Fa-fxX]'] ||= Regexp.new(gr), :regexp, index)
                  r8 = true
                  @index += 1
                else
                  terminal_parse_failure('[0-9A-Fa-fxX]')
                  r8 = nil
                end
                if r8
                  r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                  r7 = r8
                else
                  r9 = _nt_s
                  if r9
                    r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                    r7 = r9
                  else
                    @index = i7
                    r7 = nil
                  end
                end
                if r7
                  s6 << r7
                else
                  break
                end
              end
              if s6.empty?
                @index = i6
                r6 = nil
              else
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              end
              s0 << r6
              if r6
                i10 = index
                if (match_len = has_terminal?('}', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'}\'')
                  r11 = nil
                end
                if r11
                  r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                  r10 = r11
                else
                  if (match_len = has_terminal?('"', false, index))
                    r12 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'"\'')
                    r12 = nil
                  end
                  if r12
                    r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                    r10 = r12
                  else
                    @index = i10
                    r10 = nil
                  end
                end
                s0 << r10
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ISCANHEXNUMBER0)
          r0.extend(ISCANHEXNUMBER1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ISCAN_HEX_NUMBER][start_index] = r0

        r0
      end

      module ISCANBINNUMBER0
        def s
          elements[1]
        end

        def num
          elements[3]
        end

      end

      module ISCANBINNUMBER1
        def to_ast
          debugger
        end
      end

      def _nt_ISCAN_BIN_NUMBER
        start_index = index
        if node_cache[:ISCAN_BIN_NUMBER].has_key?(index)
          cached = node_cache[:ISCAN_BIN_NUMBER][index]
          if cached
            node_cache[:ISCAN_BIN_NUMBER][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i1 = index
        if (match_len = has_terminal?('"', false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r2 = nil
        end
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r1 = r2
        else
          if (match_len = has_terminal?('{', false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('\'{\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r1 = r3
          else
            @index = i1
            r1 = nil
          end
        end
        s0 << r1
        if r1
          r4 = _nt_s
          s0 << r4
          if r4
            if (match_len = has_terminal?('0b', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'0b\'')
              r5 = nil
            end
            s0 << r5
            if r5
              s6, i6 = [], index
              loop do
                i7 = index
                if has_terminal?(@regexps[gr = '\A[01xX]'] ||= Regexp.new(gr), :regexp, index)
                  r8 = true
                  @index += 1
                else
                  terminal_parse_failure('[01xX]')
                  r8 = nil
                end
                if r8
                  r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                  r7 = r8
                else
                  r9 = _nt_s
                  if r9
                    r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                    r7 = r9
                  else
                    @index = i7
                    r7 = nil
                  end
                end
                if r7
                  s6 << r7
                else
                  break
                end
              end
              if s6.empty?
                @index = i6
                r6 = nil
              else
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              end
              s0 << r6
              if r6
                i10 = index
                if (match_len = has_terminal?('}', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'}\'')
                  r11 = nil
                end
                if r11
                  r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                  r10 = r11
                else
                  if (match_len = has_terminal?('"', false, index))
                    r12 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'"\'')
                    r12 = nil
                  end
                  if r12
                    r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                    r10 = r12
                  else
                    @index = i10
                    r10 = nil
                  end
                end
                s0 << r10
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ISCANBINNUMBER0)
          r0.extend(ISCANBINNUMBER1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ISCAN_BIN_NUMBER][start_index] = r0

        r0
      end

      module Tvalue0
        def TSUFFIX
          elements[1]
        end
      end

      def _nt_tvalue
        start_index = index
        if node_cache[:tvalue].has_key?(index)
          cached = node_cache[:tvalue][index]
          if cached
            node_cache[:tvalue][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i1 = index
        r2 = _nt_EVALUE
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r1 = r2
        else
          r3 = _nt_DVALUE
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r1 = r3
          else
            @index = i1
            r1 = nil
          end
        end
        s0 << r1
        if r1
          r4 = _nt_TSUFFIX
          s0 << r4
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Tvalue0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:tvalue][start_index] = r0

        r0
      end

      module EVALUE0
        def POS_INT1
          elements[0]
        end

        def POS_INT2
          elements[2]
        end

        def POS_INT3
          elements[4]
        end
      end

      def _nt_EVALUE
        start_index = index
        if node_cache[:EVALUE].has_key?(index)
          cached = node_cache[:EVALUE][index]
          if cached
            node_cache[:EVALUE][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_POS_INT
        s0 << r1
        if r1
          if (match_len = has_terminal?('.', false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r2 = nil
          end
          s0 << r2
          if r2
            r3 = _nt_POS_INT
            s0 << r3
            if r3
              if (match_len = has_terminal?('e-', false, index))
                r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'e-\'')
                r4 = nil
              end
              s0 << r4
              if r4
                r5 = _nt_POS_INT
                s0 << r5
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(EVALUE0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:EVALUE][start_index] = r0

        r0
      end

      module DVALUE0
        def POS_INT1
          elements[0]
        end

        def POS_INT2
          elements[2]
        end
      end

      def _nt_DVALUE
        start_index = index
        if node_cache[:DVALUE].has_key?(index)
          cached = node_cache[:DVALUE][index]
          if cached
            node_cache[:DVALUE][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_POS_INT
        s0 << r1
        if r1
          if (match_len = has_terminal?('.', false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r2 = nil
          end
          s0 << r2
          if r2
            r3 = _nt_POS_INT
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(DVALUE0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:DVALUE][start_index] = r0

        r0
      end

      def _nt_TSUFFIX
        start_index = index
        if node_cache[:TSUFFIX].has_key?(index)
          cached = node_cache[:TSUFFIX][index]
          if cached
            node_cache[:TSUFFIX][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if (match_len = has_terminal?('s', false, index))
          r1 = true
          @index += match_len
        else
          terminal_parse_failure('\'s\'')
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          if (match_len = has_terminal?('ms', false, index))
            r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'ms\'')
            r2 = nil
          end
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            if (match_len = has_terminal?('us', false, index))
              r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'us\'')
              r3 = nil
            end
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r0 = r3
            else
              if (match_len = has_terminal?('ns', false, index))
                r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'ns\'')
                r4 = nil
              end
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r0 = r4
              else
                if (match_len = has_terminal?('ps', false, index))
                  r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'ps\'')
                  r5 = nil
                end
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r0 = r5
                else
                  if (match_len = has_terminal?('fs', false, index))
                    r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'fs\'')
                    r6 = nil
                  end
                  if r6
                    r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                    r0 = r6
                  else
                    if (match_len = has_terminal?('as', false, index))
                      r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'as\'')
                      r7 = nil
                    end
                    if r7
                      r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                      r0 = r7
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end

        node_cache[:TSUFFIX][start_index] = r0

        r0
      end

      module Argument0
        def s
          elements[0]
        end

        def a1
          elements[1]
        end
      end

      module Argument1
        def s1
          elements[1]
        end

        def a2
          elements[2]
        end

        def s2
          elements[3]
        end

      end

      module Argument2
        def to_ast
          a1.empty? ? a2.to_ast : a1.to_ast
        end
      end

      def _nt_argument
        start_index = index
        if node_cache[:argument].has_key?(index)
          cached = node_cache[:argument][index]
          if cached
            node_cache[:argument][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        r2 = _nt_s
        s1 << r2
        if r2
          r3 = _nt_SCALAR_ID
          s1 << r3
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Argument0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          i4, s4 = index, []
          if (match_len = has_terminal?('{', false, index))
            r5 = true
            @index += match_len
          else
            terminal_parse_failure('\'{\'')
            r5 = nil
          end
          s4 << r5
          if r5
            r6 = _nt_s
            s4 << r6
            if r6
              r7 = _nt_argWithDefault
              s4 << r7
              if r7
                r8 = _nt_s
                s4 << r8
                if r8
                  if (match_len = has_terminal?('}', false, index))
                    r9 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'}\'')
                    r9 = nil
                  end
                  s4 << r9
                end
              end
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(Argument1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:argument][start_index] = r0

        r0
      end

      module ArgWithDefault0
        def SCALAR_ID
          elements[0]
        end

        def s
          elements[1]
        end

        def args
          elements[2]
        end
      end

      def _nt_argWithDefault
        start_index = index
        if node_cache[:argWithDefault].has_key?(index)
          cached = node_cache[:argWithDefault][index]
          if cached
            node_cache[:argWithDefault][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_SCALAR_ID
        s0 << r1
        if r1
          r2 = _nt_s
          s0 << r2
          if r2
            r3 = _nt_args
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ArgWithDefault0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:argWithDefault][start_index] = r0

        r0
      end

      def _nt_args
        start_index = index
        if node_cache[:args].has_key?(index)
          cached = node_cache[:args][index]
          if cached
            node_cache[:args][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_pdl_number
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_enum_name
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            r3 = _nt_reg_or_port
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r0 = r3
            else
              @index = i0
              r0 = nil
            end
          end
        end

        node_cache[:args][start_index] = r0

        r0
      end

      module Command0
        def s
          elements[0]
        end

        def op
          elements[1]
        end

        def eoc
          elements[2]
        end
      end

      module Command1
        def to_ast
          op.to_ast
        end
      end

      def _nt_command
        start_index = index
        if node_cache[:command].has_key?(index)
          cached = node_cache[:command][index]
          if cached
            node_cache[:command][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_s
        s0 << r1
        if r1
          i2 = index
          r3 = _nt_icall_def
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r2 = r3
          else
            r4 = _nt_iuseprocnamespace_def
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r2 = r4
            else
              r5 = _nt_iprefix_def
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r2 = r5
              else
                r6 = _nt_ireset_def
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r2 = r6
                else
                  r7 = _nt_iread_def
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r2 = r7
                  else
                    r8 = _nt_iwrite_def
                    if r8
                      r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                      r2 = r8
                    else
                      r9 = _nt_iscan_def
                      if r9
                        r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                        r2 = r9
                      else
                        r10 = _nt_iapply_def
                        if r10
                          r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                          r2 = r10
                        else
                          r11 = _nt_inote_def
                          if r11
                            r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                            r2 = r11
                          else
                            r12 = _nt_ioverridescaninterface_def
                            if r12
                              r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                              r2 = r12
                            else
                              r13 = _nt_imerge_def
                              if r13
                                r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                                r2 = r13
                              else
                                r14 = _nt_itake_def
                                if r14
                                  r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
                                  r2 = r14
                                else
                                  r15 = _nt_irelease_def
                                  if r15
                                    r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                                    r2 = r15
                                  else
                                    r16 = _nt_iclock_def
                                    if r16
                                      r16 = SyntaxNode.new(input, (index-1)...index) if r16 == true
                                      r2 = r16
                                    else
                                      r17 = _nt_iclock_override_def
                                      if r17
                                        r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
                                        r2 = r17
                                      else
                                        r18 = _nt_istate_def
                                        if r18
                                          r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
                                          r2 = r18
                                        else
                                          r19 = _nt_irunloop_def
                                          if r19
                                            r19 = SyntaxNode.new(input, (index-1)...index) if r19 == true
                                            r2 = r19
                                          else
                                            r20 = _nt_sl_comment
                                            if r20
                                              r20 = SyntaxNode.new(input, (index-1)...index) if r20 == true
                                              r2 = r20
                                            else
                                              @index = i2
                                              r2 = nil
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          s0 << r2
          if r2
            r21 = _nt_eoc
            s0 << r21
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Command0)
          r0.extend(Command1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:command][start_index] = r0

        r0
      end

      module IprefixDef0
        def S
          elements[1]
        end

      end

      def _nt_iprefix_def
        start_index = index
        if node_cache[:iprefix_def].has_key?(index)
          cached = node_cache[:iprefix_def][index]
          if cached
            node_cache[:iprefix_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iPrefix', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iPrefix\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            i3 = index
            r4 = _nt_instancePath
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r3 = r4
            else
              if (match_len = has_terminal?('-', false, index))
                r5 = true
                @index += match_len
              else
                terminal_parse_failure('\'-\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r3 = r5
              else
                @index = i3
                r3 = nil
              end
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IprefixDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iprefix_def][start_index] = r0

        r0
      end

      module IcallDef0
        def instancePath
          elements[0]
        end

      end

      module IcallDef1
        def pdl_namespace_name
          elements[0]
        end

      end

      module IcallDef2
        def S
          elements[1]
        end

        def procName
          elements[4]
        end

        def s
          elements[5]
        end

      end

      def _nt_icall_def
        start_index = index
        if node_cache[:icall_def].has_key?(index)
          cached = node_cache[:icall_def][index]
          if cached
            node_cache[:icall_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iCall', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iCall\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            i4, s4 = index, []
            r5 = _nt_instancePath
            s4 << r5
            if r5
              if (match_len = has_terminal?('.', false, index))
                r6 = true
                @index += match_len
              else
                terminal_parse_failure('\'.\'')
                r6 = nil
              end
              s4 << r6
            end
            if s4.last
              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
              r4.extend(IcallDef0)
            else
              @index = i4
              r4 = nil
            end
            if r4
              r3 = r4
            else
              r3 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r3
            if r3
              i8, s8 = index, []
              r9 = _nt_pdl_namespace_name
              s8 << r9
              if r9
                if (match_len = has_terminal?('::', false, index))
                  r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'::\'')
                  r10 = nil
                end
                s8 << r10
              end
              if s8.last
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                r8.extend(IcallDef1)
              else
                @index = i8
                r8 = nil
              end
              if r8
                r7 = r8
              else
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r7
              if r7
                r11 = _nt_procName
                s0 << r11
                if r11
                  r12 = _nt_s
                  s0 << r12
                  if r12
                    s13, i13 = [], index
                    loop do
                      r14 = _nt_args
                      if r14
                        s13 << r14
                      else
                        break
                      end
                    end
                    r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                    s0 << r13
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IcallDef2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:icall_def][start_index] = r0

        r0
      end

      module IresetDef0
        def s
          elements[0]
        end

      end

      module IresetDef1
      end

      def _nt_ireset_def
        start_index = index
        if node_cache[:ireset_def].has_key?(index)
          cached = node_cache[:ireset_def][index]
          if cached
            node_cache[:ireset_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iReset', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iReset\'')
          r1 = nil
        end
        s0 << r1
        if r1
          i3, s3 = index, []
          r4 = _nt_s
          s3 << r4
          if r4
            if (match_len = has_terminal?('-sync', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'-sync\'')
              r5 = nil
            end
            s3 << r5
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(IresetDef0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            r2 = r3
          else
            r2 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IresetDef1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ireset_def][start_index] = r0

        r0
      end

      module IreadDef0
        def S
          elements[1]
        end

        def a1
          elements[2]
        end

        def s
          elements[3]
        end

        def a2
          elements[4]
        end
      end

      module IreadDef1
        def to_ast
          if a2.empty?
            n :iread_def, a1.to_ast, input: input, interval: interval, file: file
          else
            n :iread_def, a1.to_ast, a2.to_ast, input: input, interval: interval, file: file
          end
        end
      end

      def _nt_iread_def
        start_index = index
        if node_cache[:iread_def].has_key?(index)
          cached = node_cache[:iread_def][index]
          if cached
            node_cache[:iread_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iRead', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iRead\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_reg_or_port
            s0 << r3
            if r3
              r4 = _nt_s
              s0 << r4
              if r4
                i6 = index
                r7 = _nt_pdl_number
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r6 = r7
                else
                  r8 = _nt_enum_name
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r6 = r8
                  else
                    @index = i6
                    r6 = nil
                  end
                end
                if r6
                  r5 = r6
                else
                  r5 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r5
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IreadDef0)
          r0.extend(IreadDef1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iread_def][start_index] = r0

        r0
      end

      module IwriteDef0
        def S1
          elements[1]
        end

        def a1
          elements[2]
        end

        def S2
          elements[3]
        end

        def a2
          elements[4]
        end
      end

      module IwriteDef1
        def to_ast
          n :iwrite_def, a1.to_ast, a2.to_ast, input: input, interval: interval, file: file
        end
      end

      def _nt_iwrite_def
        start_index = index
        if node_cache[:iwrite_def].has_key?(index)
          cached = node_cache[:iwrite_def][index]
          if cached
            node_cache[:iwrite_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iWrite', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iWrite\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_reg_or_port
            s0 << r3
            if r3
              r4 = _nt_S
              s0 << r4
              if r4
                i5 = index
                r6 = _nt_pdl_number
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r5 = r6
                else
                  r7 = _nt_enum_name
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r5 = r7
                  else
                    @index = i5
                    r5 = nil
                  end
                end
                s0 << r5
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IwriteDef0)
          r0.extend(IwriteDef1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iwrite_def][start_index] = r0

        r0
      end

      module IscanDef0
        def S
          elements[1]
        end

        def chain_id
          elements[2]
        end
      end

      module IscanDef1
        def S
          elements[1]
        end

        def iscan_data
          elements[2]
        end
      end

      module IscanDef2
        def S
          elements[1]
        end

        def iscan_data
          elements[2]
        end
      end

      module IscanDef3
        def S
          elements[1]
        end

        def s1
          elements[3]
        end

        def scanInterface_name
          elements[4]
        end

        def s2
          elements[5]
        end

        def s3
          elements[7]
        end

        def length
          elements[8]
        end

        def s4
          elements[9]
        end

        def s5
          elements[11]
        end

        def s6
          elements[13]
        end

      end

      def _nt_iscan_def
        start_index = index
        if node_cache[:iscan_def].has_key?(index)
          cached = node_cache[:iscan_def][index]
          if cached
            node_cache[:iscan_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iScan', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iScan\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            if (match_len = has_terminal?('-ir', false, index))
              r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'-ir\'')
              r4 = nil
            end
            if r4
              r3 = r4
            else
              r3 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r3
            if r3
              r5 = _nt_s
              s0 << r5
              if r5
                r6 = _nt_scanInterface_name
                s0 << r6
                if r6
                  r7 = _nt_s
                  s0 << r7
                  if r7
                    i9, s9 = index, []
                    if (match_len = has_terminal?('–chain', false, index))
                      r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'–chain\'')
                      r10 = nil
                    end
                    s9 << r10
                    if r10
                      r11 = _nt_S
                      s9 << r11
                      if r11
                        r12 = _nt_chain_id
                        s9 << r12
                      end
                    end
                    if s9.last
                      r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                      r9.extend(IscanDef0)
                    else
                      @index = i9
                      r9 = nil
                    end
                    if r9
                      r8 = r9
                    else
                      r8 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r8
                    if r8
                      r13 = _nt_s
                      s0 << r13
                      if r13
                        r14 = _nt_length
                        s0 << r14
                        if r14
                          r15 = _nt_s
                          s0 << r15
                          if r15
                            i17, s17 = index, []
                            if (match_len = has_terminal?('-si', false, index))
                              r18 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('\'-si\'')
                              r18 = nil
                            end
                            s17 << r18
                            if r18
                              r19 = _nt_S
                              s17 << r19
                              if r19
                                r20 = _nt_iscan_data
                                s17 << r20
                              end
                            end
                            if s17.last
                              r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                              r17.extend(IscanDef1)
                            else
                              @index = i17
                              r17 = nil
                            end
                            if r17
                              r16 = r17
                            else
                              r16 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s0 << r16
                            if r16
                              r21 = _nt_s
                              s0 << r21
                              if r21
                                i23, s23 = index, []
                                if (match_len = has_terminal?('-so', false, index))
                                  r24 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'-so\'')
                                  r24 = nil
                                end
                                s23 << r24
                                if r24
                                  r25 = _nt_S
                                  s23 << r25
                                  if r25
                                    r26 = _nt_iscan_data
                                    s23 << r26
                                  end
                                end
                                if s23.last
                                  r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                                  r23.extend(IscanDef2)
                                else
                                  @index = i23
                                  r23 = nil
                                end
                                if r23
                                  r22 = r23
                                else
                                  r22 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s0 << r22
                                if r22
                                  r27 = _nt_s
                                  s0 << r27
                                  if r27
                                    if (match_len = has_terminal?('-stable', false, index))
                                      r29 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'-stable\'')
                                      r29 = nil
                                    end
                                    if r29
                                      r28 = r29
                                    else
                                      r28 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s0 << r28
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IscanDef3)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iscan_def][start_index] = r0

        r0
      end

      def _nt_iscan_data
        start_index = index
        if node_cache[:iscan_data].has_key?(index)
          cached = node_cache[:iscan_data][index]
          if cached
            node_cache[:iscan_data][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_pdl_number
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_ISCAN_HEX_NUMBER
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            r3 = _nt_ISCAN_BIN_NUMBER
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r0 = r3
            else
              @index = i0
              r0 = nil
            end
          end
        end

        node_cache[:iscan_data][start_index] = r0

        r0
      end

      module IoverridescaninterfaceDef0
        def S
          elements[1]
        end

      end

      module IoverridescaninterfaceDef1
        def S
          elements[1]
        end

      end

      module IoverridescaninterfaceDef2
        def S
          elements[1]
        end

      end

      module IoverridescaninterfaceDef3
        def S
          elements[1]
        end

        def scanInterfaceRef_list
          elements[2]
        end

        def s1
          elements[3]
        end

        def s2
          elements[5]
        end

        def s3
          elements[7]
        end

      end

      def _nt_ioverridescaninterface_def
        start_index = index
        if node_cache[:ioverridescaninterface_def].has_key?(index)
          cached = node_cache[:ioverridescaninterface_def][index]
          if cached
            node_cache[:ioverridescaninterface_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iOverrideScanInterface', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iOverrideScanInterface\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_scanInterfaceRef_list
            s0 << r3
            if r3
              r4 = _nt_s
              s0 << r4
              if r4
                i6, s6 = index, []
                if (match_len = has_terminal?('-capture', false, index))
                  r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'-capture\'')
                  r7 = nil
                end
                s6 << r7
                if r7
                  r8 = _nt_S
                  s6 << r8
                  if r8
                    i9 = index
                    if (match_len = has_terminal?('on', false, index))
                      r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'on\'')
                      r10 = nil
                    end
                    if r10
                      r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                      r9 = r10
                    else
                      if (match_len = has_terminal?('off', false, index))
                        r11 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'off\'')
                        r11 = nil
                      end
                      if r11
                        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                        r9 = r11
                      else
                        @index = i9
                        r9 = nil
                      end
                    end
                    s6 << r9
                  end
                end
                if s6.last
                  r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                  r6.extend(IoverridescaninterfaceDef0)
                else
                  @index = i6
                  r6 = nil
                end
                if r6
                  r5 = r6
                else
                  r5 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r5
                if r5
                  r12 = _nt_s
                  s0 << r12
                  if r12
                    i14, s14 = index, []
                    if (match_len = has_terminal?('-update', false, index))
                      r15 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'-update\'')
                      r15 = nil
                    end
                    s14 << r15
                    if r15
                      r16 = _nt_S
                      s14 << r16
                      if r16
                        i17 = index
                        if (match_len = has_terminal?('on', false, index))
                          r18 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'on\'')
                          r18 = nil
                        end
                        if r18
                          r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
                          r17 = r18
                        else
                          if (match_len = has_terminal?('off', false, index))
                            r19 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('\'off\'')
                            r19 = nil
                          end
                          if r19
                            r19 = SyntaxNode.new(input, (index-1)...index) if r19 == true
                            r17 = r19
                          else
                            @index = i17
                            r17 = nil
                          end
                        end
                        s14 << r17
                      end
                    end
                    if s14.last
                      r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                      r14.extend(IoverridescaninterfaceDef1)
                    else
                      @index = i14
                      r14 = nil
                    end
                    if r14
                      r13 = r14
                    else
                      r13 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r13
                    if r13
                      r20 = _nt_s
                      s0 << r20
                      if r20
                        i22, s22 = index, []
                        if (match_len = has_terminal?('-broadcast', false, index))
                          r23 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'-broadcast\'')
                          r23 = nil
                        end
                        s22 << r23
                        if r23
                          r24 = _nt_S
                          s22 << r24
                          if r24
                            i25 = index
                            if (match_len = has_terminal?('on', false, index))
                              r26 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('\'on\'')
                              r26 = nil
                            end
                            if r26
                              r26 = SyntaxNode.new(input, (index-1)...index) if r26 == true
                              r25 = r26
                            else
                              if (match_len = has_terminal?('off', false, index))
                                r27 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('\'off\'')
                                r27 = nil
                              end
                              if r27
                                r27 = SyntaxNode.new(input, (index-1)...index) if r27 == true
                                r25 = r27
                              else
                                @index = i25
                                r25 = nil
                              end
                            end
                            s22 << r25
                          end
                        end
                        if s22.last
                          r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                          r22.extend(IoverridescaninterfaceDef2)
                        else
                          @index = i22
                          r22 = nil
                        end
                        if r22
                          r21 = r22
                        else
                          r21 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r21
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IoverridescaninterfaceDef3)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ioverridescaninterface_def][start_index] = r0

        r0
      end

      module ScanInterfaceRefList0
        def s
          elements[0]
        end

        def scanInterfaceRef
          elements[1]
        end
      end

      module ScanInterfaceRefList1
        def scanInterfaceRef
          elements[0]
        end

      end

      def _nt_scanInterfaceRef_list
        start_index = index
        if node_cache[:scanInterfaceRef_list].has_key?(index)
          cached = node_cache[:scanInterfaceRef_list][index]
          if cached
            node_cache[:scanInterfaceRef_list][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_scanInterfaceRef
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            r4 = _nt_s
            s3 << r4
            if r4
              r5 = _nt_scanInterfaceRef
              s3 << r5
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(ScanInterfaceRefList0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ScanInterfaceRefList1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:scanInterfaceRef_list][start_index] = r0

        r0
      end

      module ScanInterfaceRef0
        def instancePath
          elements[0]
        end

        def DOT
          elements[1]
        end
      end

      module ScanInterfaceRef1
        def scanInterface_name
          elements[1]
        end
      end

      def _nt_scanInterfaceRef
        start_index = index
        if node_cache[:scanInterfaceRef].has_key?(index)
          cached = node_cache[:scanInterfaceRef][index]
          if cached
            node_cache[:scanInterfaceRef][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i2, s2 = index, []
        r3 = _nt_instancePath
        s2 << r3
        if r3
          r4 = _nt_DOT
          s2 << r4
        end
        if s2.last
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          r2.extend(ScanInterfaceRef0)
        else
          @index = i2
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          r5 = _nt_scanInterface_name
          s0 << r5
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ScanInterfaceRef1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:scanInterfaceRef][start_index] = r0

        r0
      end

      module IapplyDef0
        def s
          elements[0]
        end

      end

      module IapplyDef1
        def a1
          elements[1]
        end
      end

      module IapplyDef2
        def to_ast
          n :iapply_def, !a1.empty?, input: input, interval: interval, file: file
        end
      end

      def _nt_iapply_def
        start_index = index
        if node_cache[:iapply_def].has_key?(index)
          cached = node_cache[:iapply_def][index]
          if cached
            node_cache[:iapply_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iApply', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iApply\'')
          r1 = nil
        end
        s0 << r1
        if r1
          i3, s3 = index, []
          r4 = _nt_s
          s3 << r4
          if r4
            if (match_len = has_terminal?('-together', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'-together\'')
              r5 = nil
            end
            s3 << r5
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(IapplyDef0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            r2 = r3
          else
            r2 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IapplyDef1)
          r0.extend(IapplyDef2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iapply_def][start_index] = r0

        r0
      end

      module IclockDef0
        def S
          elements[1]
        end

        def sysClock
          elements[2]
        end
      end

      def _nt_iclock_def
        start_index = index
        if node_cache[:iclock_def].has_key?(index)
          cached = node_cache[:iclock_def][index]
          if cached
            node_cache[:iclock_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iClock', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iClock\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_sysClock
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IclockDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iclock_def][start_index] = r0

        r0
      end

      module IclockOverrideDef0
        def S
          elements[1]
        end

        def sourceClock
          elements[2]
        end
      end

      module IclockOverrideDef1
        def S
          elements[1]
        end

        def POS_INT
          elements[2]
        end
      end

      module IclockOverrideDef2
        def S
          elements[1]
        end

        def POS_INT
          elements[2]
        end
      end

      module IclockOverrideDef3
        def S
          elements[1]
        end

        def sysClock
          elements[2]
        end

        def s1
          elements[3]
        end

        def s2
          elements[5]
        end

        def s3
          elements[7]
        end

      end

      def _nt_iclock_override_def
        start_index = index
        if node_cache[:iclock_override_def].has_key?(index)
          cached = node_cache[:iclock_override_def][index]
          if cached
            node_cache[:iclock_override_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iClockOverride', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iClockOverride\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_sysClock
            s0 << r3
            if r3
              r4 = _nt_s
              s0 << r4
              if r4
                i6, s6 = index, []
                if (match_len = has_terminal?('-source', false, index))
                  r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'-source\'')
                  r7 = nil
                end
                s6 << r7
                if r7
                  r8 = _nt_S
                  s6 << r8
                  if r8
                    r9 = _nt_sourceClock
                    s6 << r9
                  end
                end
                if s6.last
                  r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                  r6.extend(IclockOverrideDef0)
                else
                  @index = i6
                  r6 = nil
                end
                if r6
                  r5 = r6
                else
                  r5 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r5
                if r5
                  r10 = _nt_s
                  s0 << r10
                  if r10
                    i12, s12 = index, []
                    if (match_len = has_terminal?('-freqMultiplier', false, index))
                      r13 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'-freqMultiplier\'')
                      r13 = nil
                    end
                    s12 << r13
                    if r13
                      r14 = _nt_S
                      s12 << r14
                      if r14
                        r15 = _nt_POS_INT
                        s12 << r15
                      end
                    end
                    if s12.last
                      r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                      r12.extend(IclockOverrideDef1)
                    else
                      @index = i12
                      r12 = nil
                    end
                    if r12
                      r11 = r12
                    else
                      r11 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r11
                    if r11
                      r16 = _nt_s
                      s0 << r16
                      if r16
                        i18, s18 = index, []
                        if (match_len = has_terminal?('-freqDivider', false, index))
                          r19 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'-freqDivider\'')
                          r19 = nil
                        end
                        s18 << r19
                        if r19
                          r20 = _nt_S
                          s18 << r20
                          if r20
                            r21 = _nt_POS_INT
                            s18 << r21
                          end
                        end
                        if s18.last
                          r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                          r18.extend(IclockOverrideDef2)
                        else
                          @index = i18
                          r18 = nil
                        end
                        if r18
                          r17 = r18
                        else
                          r17 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r17
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IclockOverrideDef3)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:iclock_override_def][start_index] = r0

        r0
      end

      module IrunloopDef0
        def S
          elements[1]
        end

        def port
          elements[2]
        end
      end

      module IrunloopDef1
        def cycleCount
          elements[0]
        end

        def S
          elements[1]
        end

      end

      module IrunloopDef2
        def S
          elements[1]
        end

        def tvalue
          elements[2]
        end
      end

      module IrunloopDef3
        def S
          elements[1]
        end

      end

      def _nt_irunloop_def
        start_index = index
        if node_cache[:irunloop_def].has_key?(index)
          cached = node_cache[:irunloop_def][index]
          if cached
            node_cache[:irunloop_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iRunLoop', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iRunLoop\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            i3 = index
            i4, s4 = index, []
            r5 = _nt_cycleCount
            s4 << r5
            if r5
              r6 = _nt_S
              s4 << r6
              if r6
                i7 = index
                if (match_len = has_terminal?('-tck', false, index))
                  r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'-tck\'')
                  r8 = nil
                end
                if r8
                  r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                  r7 = r8
                else
                  i9, s9 = index, []
                  if (match_len = has_terminal?('-sck', false, index))
                    r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'-sck\'')
                    r10 = nil
                  end
                  s9 << r10
                  if r10
                    r11 = _nt_S
                    s9 << r11
                    if r11
                      r12 = _nt_port
                      s9 << r12
                    end
                  end
                  if s9.last
                    r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                    r9.extend(IrunloopDef0)
                  else
                    @index = i9
                    r9 = nil
                  end
                  if r9
                    r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                    r7 = r9
                  else
                    @index = i7
                    r7 = nil
                  end
                end
                s4 << r7
              end
            end
            if s4.last
              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
              r4.extend(IrunloopDef1)
            else
              @index = i4
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r3 = r4
            else
              i13, s13 = index, []
              if (match_len = has_terminal?('-time', false, index))
                r14 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'-time\'')
                r14 = nil
              end
              s13 << r14
              if r14
                r15 = _nt_S
                s13 << r15
                if r15
                  r16 = _nt_tvalue
                  s13 << r16
                end
              end
              if s13.last
                r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                r13.extend(IrunloopDef2)
              else
                @index = i13
                r13 = nil
              end
              if r13
                r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                r3 = r13
              else
                @index = i3
                r3 = nil
              end
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IrunloopDef3)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:irunloop_def][start_index] = r0

        r0
      end

      module ImergeDef0
        def S
          elements[1]
        end

      end

      def _nt_imerge_def
        start_index = index
        if node_cache[:imerge_def].has_key?(index)
          cached = node_cache[:imerge_def][index]
          if cached
            node_cache[:imerge_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iMerge', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iMerge\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            i3 = index
            if (match_len = has_terminal?('-begin', false, index))
              r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'-begin\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r3 = r4
            else
              if (match_len = has_terminal?('-end', false, index))
                r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'-end\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r3 = r5
              else
                @index = i3
                r3 = nil
              end
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ImergeDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:imerge_def][start_index] = r0

        r0
      end

      module ItakeDef0
        def S
          elements[1]
        end

        def reg_port_or_instance
          elements[2]
        end
      end

      def _nt_itake_def
        start_index = index
        if node_cache[:itake_def].has_key?(index)
          cached = node_cache[:itake_def][index]
          if cached
            node_cache[:itake_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iTake', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iTake\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_reg_port_or_instance
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ItakeDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:itake_def][start_index] = r0

        r0
      end

      module IreleaseDef0
        def S
          elements[1]
        end

        def reg_port_or_instance
          elements[2]
        end
      end

      def _nt_irelease_def
        start_index = index
        if node_cache[:irelease_def].has_key?(index)
          cached = node_cache[:irelease_def][index]
          if cached
            node_cache[:irelease_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iRelease', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iRelease\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_reg_port_or_instance
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IreleaseDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:irelease_def][start_index] = r0

        r0
      end

      module InoteDef0
        def S1
          elements[1]
        end

        def S2
          elements[3]
        end

        def QUOTED
          elements[4]
        end
      end

      def _nt_inote_def
        start_index = index
        if node_cache[:inote_def].has_key?(index)
          cached = node_cache[:inote_def][index]
          if cached
            node_cache[:inote_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iNote', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iNote\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            i3 = index
            if (match_len = has_terminal?('-comment', false, index))
              r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'-comment\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r3 = r4
            else
              if (match_len = has_terminal?('-status', false, index))
                r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'-status\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r3 = r5
              else
                @index = i3
                r3 = nil
              end
            end
            s0 << r3
            if r3
              r6 = _nt_S
              s0 << r6
              if r6
                r7 = _nt_QUOTED
                s0 << r7
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(InoteDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:inote_def][start_index] = r0

        r0
      end

      module IstateDef0
        def S1
          elements[1]
        end

        def reg_or_port
          elements[2]
        end

        def S2
          elements[3]
        end

        def pdl_number
          elements[4]
        end

        def s
          elements[5]
        end

      end

      def _nt_istate_def
        start_index = index
        if node_cache[:istate_def].has_key?(index)
          cached = node_cache[:istate_def][index]
          if cached
            node_cache[:istate_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('iState', false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'iState\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_S
          s0 << r2
          if r2
            r3 = _nt_reg_or_port
            s0 << r3
            if r3
              r4 = _nt_S
              s0 << r4
              if r4
                r5 = _nt_pdl_number
                s0 << r5
                if r5
                  r6 = _nt_s
                  s0 << r6
                  if r6
                    i8 = index
                    if (match_len = has_terminal?('-LastWrittenValue', false, index))
                      r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'-LastWrittenValue\'')
                      r9 = nil
                    end
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r8 = r9
                    else
                      if (match_len = has_terminal?('-LastReadValue', false, index))
                        r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'-LastReadValue\'')
                        r10 = nil
                      end
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r8 = r10
                      else
                        if (match_len = has_terminal?('-LastMiscompareValue', false, index))
                          r11 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'-LastMiscompareValue\'')
                          r11 = nil
                        end
                        if r11
                          r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                          r8 = r11
                        else
                          @index = i8
                          r8 = nil
                        end
                      end
                    end
                    if r8
                      r7 = r8
                    else
                      r7 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r7
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(IstateDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:istate_def][start_index] = r0

        r0
      end

      def _nt_icl_namespace_name
        start_index = index
        if node_cache[:icl_namespace_name].has_key?(index)
          cached = node_cache[:icl_namespace_name][index]
          if cached
            node_cache[:icl_namespace_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_SCALAR_ID

        node_cache[:icl_namespace_name][start_index] = r0

        r0
      end

      def _nt_pdl_namespace_name
        start_index = index
        if node_cache[:pdl_namespace_name].has_key?(index)
          cached = node_cache[:pdl_namespace_name][index]
          if cached
            node_cache[:pdl_namespace_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_SCALAR_ID

        node_cache[:pdl_namespace_name][start_index] = r0

        r0
      end

      module ARGUMENTREF0
        def id
          elements[1]
        end
      end

      module ARGUMENTREF1
        def to_ast
          n :ARGUMENT_REF, id.text_value, input: input, interval: interval, file: file
        end
      end

      def _nt_ARGUMENT_REF
        start_index = index
        if node_cache[:ARGUMENT_REF].has_key?(index)
          cached = node_cache[:ARGUMENT_REF][index]
          if cached
            node_cache[:ARGUMENT_REF][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?('$', false, index))
          r1 = true
          @index += match_len
        else
          terminal_parse_failure('\'$\'')
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_SCALAR_ID
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ARGUMENTREF0)
          r0.extend(ARGUMENTREF1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ARGUMENT_REF][start_index] = r0

        r0
      end

      module SCALARID0
      end

      module SCALARID1
        def to_ast
          n :SCALAR_ID, text_value, input: input, interval: interval, file: file
        end
      end

      def _nt_SCALAR_ID
        start_index = index
        if node_cache[:SCALAR_ID].has_key?(index)
          cached = node_cache[:SCALAR_ID][index]
          if cached
            node_cache[:SCALAR_ID][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
          r1 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z]')
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
              r3 = true
              @index += 1
            else
              terminal_parse_failure('[a-zA-Z0-9_]')
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(SCALARID0)
          r0.extend(SCALARID1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:SCALAR_ID][start_index] = r0

        r0
      end

      module DotId0
        def SCALAR_ID
          elements[1]
        end
      end

      module DotId1
        def SCALAR_ID
          elements[0]
        end

      end

      module DotId2
        def to_ast
          n :dot_id, text_value, input: input, interval: interval, file: file
        end
      end

      def _nt_dot_id
        start_index = index
        if node_cache[:dot_id].has_key?(index)
          cached = node_cache[:dot_id][index]
          if cached
            node_cache[:dot_id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_SCALAR_ID
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            if (match_len = has_terminal?('.', false, index))
              r4 = true
              @index += match_len
            else
              terminal_parse_failure('\'.\'')
              r4 = nil
            end
            s3 << r4
            if r4
              r5 = _nt_SCALAR_ID
              s3 << r5
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(DotId0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(DotId1)
          r0.extend(DotId2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:dot_id][start_index] = r0

        r0
      end

      module Eoc0
      end

      def _nt_eoc
        start_index = index
        if node_cache[:eoc].has_key?(index)
          cached = node_cache[:eoc][index]
          if cached
            node_cache[:eoc][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        s1, i1 = [], index
        loop do
          i2 = index
          if (match_len = has_terminal?(" ", false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('" "')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r2 = r3
          else
            if (match_len = has_terminal?("\t", false, index))
              r4 = true
              @index += match_len
            else
              terminal_parse_failure('"\\t"')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r2 = r4
            else
              @index = i2
              r2 = nil
            end
          end
          if r2
            s1 << r2
          else
            break
          end
        end
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        s0 << r1
        if r1
          i5 = index
          if (match_len = has_terminal?(';', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('\';\'')
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_N
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              r8 = _nt_sl_comment
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r5 = r8
              else
                @index = i5
                r5 = nil
              end
            end
          end
          s0 << r5
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Eoc0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:eoc][start_index] = r0

        r0
      end

      def _nt_s
        start_index = index
        if node_cache[:s].has_key?(index)
          cached = node_cache[:s][index]
          if cached
            node_cache[:s][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1 = index
          if (match_len = has_terminal?(" ", false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('" "')
            r2 = nil
          end
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r1 = r2
          else
            if (match_len = has_terminal?("\t", false, index))
              r3 = true
              @index += match_len
            else
              terminal_parse_failure('"\\t"')
              r3 = nil
            end
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r1 = r3
            else
              r4 = _nt_N
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r1 = r4
              else
                r5 = _nt_sl_comment
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r1 = r5
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

        node_cache[:s][start_index] = r0

        r0
      end

      def _nt_S
        start_index = index
        if node_cache[:S].has_key?(index)
          cached = node_cache[:S][index]
          if cached
            node_cache[:S][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1 = index
          if (match_len = has_terminal?(" ", false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('" "')
            r2 = nil
          end
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r1 = r2
          else
            if (match_len = has_terminal?("\t", false, index))
              r3 = true
              @index += match_len
            else
              terminal_parse_failure('"\\t"')
              r3 = nil
            end
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r1 = r3
            else
              r4 = _nt_N
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r1 = r4
              else
                r5 = _nt_sl_comment
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r1 = r5
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        end

        node_cache[:S][start_index] = r0

        r0
      end

      module N0
      end

      def _nt_n
        start_index = index
        if node_cache[:n].has_key?(index)
          cached = node_cache[:n][index]
          if cached
            node_cache[:n][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?("\r", false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('"\\r"')
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          if (match_len = has_terminal?("\n", false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('"\\n"')
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(N0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:n][start_index] = r0

        r0
      end

      module N0
      end

      def _nt_N
        start_index = index
        if node_cache[:N].has_key?(index)
          cached = node_cache[:N][index]
          if cached
            node_cache[:N][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?("\r", false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('"\\r"')
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          if (match_len = has_terminal?("\n", false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('"\\n"')
            r3 = nil
          end
          s0 << r3
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(N0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:N][start_index] = r0

        r0
      end

    end

    class GrammarParser < Treetop::Runtime::CompiledParser
      include Grammar
    end

  end
end
